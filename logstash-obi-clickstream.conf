# @rmoff
# December 2015
#
# NB works best on >= logstash 1.5.0.beta1
# In previous versions the grok 'break_on_match => false' didn't work, so you'll see missing data
#
# To make this vagely distributable, the assumption is that the current working directory is logstash, and that rm-monitor is in the folder above.
#   ./bin/logstash -f ../rm-monitor/logstash-obi-testing.conf
# -----------------------------------------------------------------------------------------------

input {

	file {
		# If set to "beginning" logstash will start at the beginning of the file, that is, process what
		# is there AND then start tailing it for new content. If end (the default) it just tails the file
		# and ignores existing content
		#
		# If you want to *re-process* a file that logstash has already processed then you need to remove the
		# sincedb related to it, by default in ~/.sincedb*
		#
		start_position 	=> beginning
		path =>  ["/app/oracle/biee/user_projects/domains/bi/servers/obips1/logs/rm_http*.log"]
		type => "OracleBIPresentationServicesComponent" 
	}

}

filter {

	if [file] !~ /.+/ {
		mutate {add_field => {file => "%{path}"} }
	}

	multiline {
		# This is TIMESTAMP_ISO8601, distilled down from the regex templates in logstash/patterns/grok-logstash/patterns
		pattern => "^\[(\d\d){1,2}-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])[T ](?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?))?(?:Z|[+-](?:2[0123]|[01]?[0-9])(?::?(?:[0-5][0-9])))?\]"
		# If a line does not begin with the timestamp, then assume it is part of the previous log message
		negate => true
		what => "previous"
	}

	# This took me a while to figure http://stackoverflow.com/a/22193252 -- grok doesn't like \n
	mutate { gsub => ['message', "\n", "--NL--"] }
	# Different OBI deployments have different CRLF combos, let's unify them
	mutate { gsub => ['message', "\r--NL--", "--NL--"] }
	mutate { gsub => ['message', "\r", ""] }

	# exclude records with no log content (eg top of file)
	if [message] == "--NL--"  {
		# mutate { add_tag => ["drop"]}
		drop {}
	}

	# Save yourself tons of time and use this for perfecting grok statements: http://grokdebug.herokuapp.com/
	grok {
		break_on_match => true
		match => [
			"message", "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:Component}\] \[%{WORD:Severity}(:%{NUMBER:LogLevelNum})?\] \[%{DATA:InternalUser}\] \[%{DATA:internal-component}\] \[ecid: %{DATA:ECID}\] \[tid: %{DATA:TID}\] %{GREEDYDATA:message}"
		]
		overwrite  => ["message"]
		tag_on_failure => ["_grokparsefailure","grok01"]
	}

	# Scrape out all we can from the message
	if [internal-component] == "saw.httpserver.request.showrequest" {
		mutate {	add_tag => "http"}
	        grok {
	                break_on_match => false
			match => [
			"message","Action='%{DATA:saw_http_Action}',"
			,"message","--NL--Path: %{DATA:saw_http_SAWPath}--NL--"
			,"message","--NL--SessionID: %{DATA:saw_http_SessionID}--NL--"
			,"message","--NL--task: %{DATA:saw_http_Task}--NL--"
			,"message","AuthProps: AuthSchema=.+\|UID=%{DATA:saw_http_UID}\|User=%{DATA:saw_http_user}--NL--"
			,"message","CONTENT_TYPE=%{DATA:saw_http_content_type}, "
			,"message","Attach=%{DATA:saw_Attach}--NL--"
			,"message","Caller='%{WORD:saw_http_caller}',"
			,"message","ClientStateXml=%{DATA:saw_http_ClientStateXml}--NL--icharset"
			,"message","ColumnExpr=%{DATA:saw_http_ColumnExpr}--NL--"
			,"message","ColumnID=%{DATA:saw_http_ColumnID}--NL--"
			,"message","Content-Length=%{DATA:saw_http_Req-Content-Length}--NL--"
			,"message","Content-Type: %{DATA:saw_http_content_type};"
			,"message","DashPagePath: %{DATA:saw_http_DashPagePath}--NL--"
			,"message","DashPath: %{DATA:DashPath}--NL--"
			,"message","DashboardCaption='%{DATA:saw_http_DashboardCaption}',"
			,"message","Done=%{DATA:saw_http_Done}--NL--"
			,"message","EditorID=%{DATA:saw_http_EditorID}--NL--"
			,"message","Folder=%{DATA:saw_http_Folder}--NL--"
			,"message","HTTP_CHUNKED_AWARE=%{DATA:saw_http_HTTP_CHUNKED_AWARE},"
			,"message","HttpCommand: %{WORD:saw_http_http_command}"
			,"message","IS_SECURE=%{DATA:saw_http_IS_SECURE},"
			,"message","ItemName=%{DATA:saw_http_ItemName}--NL--"
			,"message","JSESSIONID=%{DATA:saw_http_cookie-JSESSIONID};"
			,"message","NQUser=%{DATA:saw_http_NQUser}--NL--"
			,"message","ORA_BIPS_LBINFO=%{WORD:saw_http_cookie-ORA_BIPS_LBINFO}"
			,"message","ORA_BIPS_NQID=%{WORD:saw_http_cookie-ORA_BIPS_NQID}"
			,"message","Page='%{DATA:saw_http_DBPage}',"
			,"message","PortalPath=%{DATA:saw_http_PortalPath}--NL--"
			,"message","REMOTE_ADDR=%{IPV4:saw_http_REMOTE_ADDR},"
			,"message","REMOTE_HOST=%{DATA:saw_http_REMOTE_HOST},"
			,"message","RSP: %{DATA:saw_http_RSP}--NL--"
			,"message","Referer=%{DATA:saw_http_Referer}--NL--"
			,"message","RemoteIP: %{IPV4:saw_http_RemoteIP}"
			,"message","ReportEditor:--NL--%{DATA:saw_http_ReportEditor}--NL--"
			,"message","ReportEditor=%{DATA:saw_http_ReportEditor}--NL--"
			,"message","ReportXML:--NL--%{DATA:saw_http_ReportXML}--NL--icharset"
			,"message","Request params:--NL--%{DATA:saw_http_request}--NL--"
			,"message","Request received.--NL--Type: %{WORD:saw_http_RequestType}"
			,"message","RptPath: %{DATA:saw_http_RptPath}--NL--"
			,"message","SCRIPT_NAME=%{DATA:saw_http_SCRIPT_NAME},"
			,"message","SERVER_NAME=%{DATA:saw_http_SERVER_NAME},"
			,"message","SERVER_PORT=%{DATA:saw_http_SERVER_PORT},"
			,"message","SERVER_PROTOCOL=%{DATA:saw_http_SERVER_PROTOCOL},"
			,"message","SESSION_COOKIE_SUFFIX=%{DATA:saw_http_SESSION_COOKIE_SUFFIX},"
			,"message","SID: %{DATA:saw_http_SID}--NL--"
			,"message","SearchID=%{WORD:saw_http_SearchID}--NL--"
			,"message","StateAction='%{WORD:saw_http_StateAction}"
			,"message","StateID=%{WORD:saw_http_StateID}--NL--"
			,"message","StateID=%{WORD:saw_http_StateID}--NL--"
			,"message","Status Code: %{NUMBER:Status-code}, Content-Length: %{NUMBER:saw_http_Content-Length}"
			,"message","Style=%{WORD:saw_Style}--NL--"
			,"message","SubjectArea=\"%{DATA:saw_http_subjectArea}\"--NL--"
			,"message","ThreadID: %{WORD:saw_http_ThreadID}--NL--"
			,"message","ThreadID: '%{WORD:saw_http_ThreadID}',"
			,"message","URL=%{DATA:saw_http_URL}\["
			,"message","UpdateAnswerTree:--NL--%{DATA:saw_http_UpdateAnswerTree}--NL--"
			,"message","UpdateAnswerTree=%{WORD:saw_http_ViewState}"
			,"message","User-Agent=%{DATA:saw_http_User-Agent}--NL--"
			,"message","ViewID=%{DATA:saw_http_ViewID}--NL--"
			,"message","ViewState=%{WORD:saw_http_ViewState}"
			,"message","X-Forwarded-For=%{DATA:saw_http_X-Forwarded-For}--NL--"
			,"message","_scid='%{DATA:saw_http__scid}''"
			,"message","action=%{DATA:saw_http_path}--NL--"
			,"message","ecid: %{DATA:saw_http_ecid}--NL--"
			,"message","fmapId='%{WORD:saw_http_fmapId}',"
			,"message","iBotPath: %{DATA:saw_http_iBotPath}--NL--"
			,"message","iBotSessionID: %{DATA:saw_http_iBotSessionID}--NL--"
			,"message","page='%{DATA:saw_http_DBPage}',"
			,"message","path=%{DATA:saw_http_path}--NL--"
			,"message","reloadTargets=%{WORD:saw_http_reloadTargets}"
			,"message","sqlColumnName=%{WORD:saw_http_sqlColumnName}--NL--"
			,"message","table=\"%{DATA:saw_http_SATable}\"--NL--"
			,"message","tableKey=%{DATA:saw_http_SATableKey}--NL--"
			,"message","viewEditor=%{DATA:saw_http_ViewEditor}--NL--"
			,"message","viewID=%{DATA:saw_http_ViewID}--NL--"
			]
		tag_on_failure => []
	        }

		# Look up the geographical location for the client IP
		geoip { source => "saw_http_RemoteIP"}

		# TODO urldecode the portalpath etc from the HTTP data here

		# Enrich the user agent data
		if [saw_http_User-Agent] =~ /iphone/ or [saw_http_User-Agent] =~ /ipad/ or [saw_http_User-Agent] =~ /Mobile/ or [saw_http_User-Agent] =~ /Android/ {
			mutate {add_field => {"mobile" => 1}}
		} else {
			mutate {add_field => {"mobile" => 0}}
		}

		useragent { source => "saw_http_User-Agent" target => "ua"}

		if [ua][[major] =~ /.+/ {
			mutate {add_field => {useragent => "%{[ua][name]} %{[ua][major]}.%{[ua][minor]}"} }
		}
	}

	# --------------------------
	# Set the time of the event to that of the log entry
	date {
		match => ["timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "yyyy-MM-dd'T'HH:mm:ssZZ","MMM dd, yyyy hh:mm:ss a","dd/MMM/yyyy:HH:mm:ss Z"]
	}
	mutate { remove_field => ["timestamp"]}
	mutate { uppercase => ["severity"]}

	mutate { gsub => ['ora-message', "--NL--", " "] }
	mutate { gsub => ['message', "--NL--", " "] }
	mutate { gsub => ['main_message', "--NL--", " "] }
	mutate { gsub => ['additional_message_data', "--NL--", " "] }
	mutate { gsub => ['stack', "--NL--", "/"] }
	mutate { gsub => ['stack', "\t", ""] }
}

output {
	if "_grokparsefailure" not in [tags] {
#		elasticsearch { hosts => "localhost"  index => "logstash-obiee-%{+YYYY.MM.dd}" }
		if [type] == "OracleBIPresentationServicesComponent" and "http" in [tags] {
	#		stdout { codec => rubydebug }
			csv { fields => ["@timestamp", "saw_http_cookie-ORA_BIPS_NQID","saw_http_user", "saw_http_SessionID","saw_http_ecid", "saw_http_RequestType","saw_http_request","saw_http_Folder","saw_http_ItemName","saw_http_EditorID","saw_http_ReportEditor","saw_http_subjectArea","saw_http_SATable","saw_http_Action","useragent","mobile"] 
				path => "~/obi-clickdata/http_requests.csv"}
			}
	} 
	}
